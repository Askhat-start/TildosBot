import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
import subprocess
from script import pollinations_generate
from aiogram.types import CallbackQuery
import json
from datetime import datetime
import custom_keyboards as cs
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

SAVE_DIR = "audio"
os.makedirs(SAVE_DIR, exist_ok=True)

REGISTRY_PATH = "records.json"

# –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π
if not os.path.exists(REGISTRY_PATH):
    with open(REGISTRY_PATH, "w", encoding="utf-8") as f:
        json.dump([], f, ensure_ascii=False, indent=2)


def load_registry():
    with open(REGISTRY_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


def save_registry(registry):
    with open(REGISTRY_PATH, "w", encoding="utf-8") as f:
        json.dump(registry, f, ensure_ascii=False, indent=2)


async def convert_to_wav(input_path, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ ffmpeg"""
    cmd = [
        "ffmpeg", "-i", input_path,
        "-ar", "16000", "-ac", "1", "-c:a", "pcm16le", output_path,
        "-y"
    ]
    subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


@dp.message(F.voice)
async def handle_voice(message: Message):
    file = await bot.get_file(message.voice.file_id)
    file_path = file.file_path
    file_ext = ".ogg"

    base_name = f"{message.from_user.id}_{message.message_id}"
    raw_path = os.path.join(SAVE_DIR, base_name + file_ext)
    wav_path = os.path.join(SAVE_DIR, base_name + ".wav")

    # —Å–∫–∞—á–∞—Ç—å voice
    await bot.download_file(file_path, raw_path)
    await convert_to_wav(raw_path, wav_path)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ (–ø–æ—Å–ª–µ–¥–Ω—é—é –±–µ–∑ audio)
    registry = load_registry()
    for rec in reversed(registry):  # –∏–¥—ë–º —Å –∫–æ–Ω—Ü–∞
        if rec["user_id"] == message.from_user.id and rec["audio"] is None:
            rec["audio"] = wav_path
            break
    save_registry(registry)

    await message.answer(f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç!")
    await message.answer(f"–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë?", reply_markup=cs.kb2)


@dp.callback_query(lambda c: c.data == "voice_get")
async def handle_voice_button(callback: CallbackQuery):
    text = pollinations_generate()
    # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–∞–º callback, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è
    await callback.answer()

    # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
    registry = load_registry()
    rec_id = f"{callback.from_user.id}_{len(registry)}"

    record = {
        "id": rec_id,
        "user_id": callback.from_user.id,
        "text": text,
        "audio": None,
        "created_at": datetime.utcnow().isoformat()
    }

    registry.append(record)
    save_registry(registry)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∑–≤—É—á—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ:")
    await callback.message.answer(text)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üéô –ü—Ä–∏–≤–µ—Ç! TilDos ‚Äî —ç—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, —Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî —Å–æ–±—Ä–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã –∫–∞–∑–∞—Ö—Å–∫–æ–π —Ä–µ—á–∏."
                         " –ì–æ–ª–æ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –∏ –æ–±—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ, "
                         "–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã –¥–µ—Ç—è–º –∏ –≤–∑—Ä–æ—Å–ª—ã–º —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –î–¶–ü –∏–ª–∏ –∞—É—Ç–∏–∑–º–µ).", reply_markup=cs.kb)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

